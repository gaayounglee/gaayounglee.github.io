'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getScaledCoordinate = exports.svgCoordinateSimplify = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _cheerio = require('cheerio');

var _cheerio2 = _interopRequireDefault(_cheerio);

var _svgpath = require('svgpath');

var _svgpath2 = _interopRequireDefault(_svgpath);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var scalePath = function scalePath($, options) {
  $('path').each(function (index, element) {
    var $path = $(element);
    var path = $path.attr('d');

    if (path) {
      var newPath = (0, _svgpath2.default)(path).translate(options.transformX, options.transformY).scale(options.scaleX, options.scaleY).rel().round(1).toString();

      $path.attr('d', newPath);
    }
  });
};

var getScale = function getScale() {
  var coordinate = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
  var scaleOptions = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

  if (_lodash2.default.isNumber(scaleOptions)) {
    return {};
  }

  if (_lodash2.default.isObject(scaleOptions) && _lodash2.default.has(scaleOptions, 'width')) {
    return scaleOptions.width / coordinate.width;
  }

  return 1;
};

var getOriginCoordinate = function getOriginCoordinate(svgAttrs) {
  return _lodash2.default.reduce(svgAttrs, function (result, value, key) {
    if (key === 'viewBox') {
      var viewBoxValues = value.split(' ');

      return _extends({}, result, {
        viewBoxX: parseFloat(viewBoxValues[0], 10),
        viewBoxY: parseFloat(viewBoxValues[1], 10),
        viewBoxWidth: parseFloat(viewBoxValues[2], 10),
        viewBoxHeight: parseFloat(viewBoxValues[3], 10)
      });
    }

    return _extends({}, result, _defineProperty({}, key, parseFloat(value, 10)));
  }, {});
};

var svgCoordinateSimplify = exports.svgCoordinateSimplify = function svgCoordinateSimplify(coordinate) {
  return {
    width: coordinate.width || coordinate.viewBoxWidth,
    height: coordinate.height || coordinate.viewBoxHeight,
    scaleX: coordinate.width && coordinate.viewBoxWidth ? coordinate.width / coordinate.viewBoxWidth : 1,
    scaleY: coordinate.height && coordinate.viewBoxHeight ? coordinate.height / coordinate.viewBoxHeight : 1,
    transformX: coordinate.viewBoxX ? -coordinate.viewBoxX : 0,
    transformY: coordinate.viewBoxX ? -coordinate.viewBoxY : 0
  };
};

var getScaledCoordinate = exports.getScaledCoordinate = function getScaledCoordinate(coordinate, scale) {
  return _extends({}, coordinate, {
    width: coordinate.width * scale,
    height: coordinate.height * scale,
    scaleX: coordinate.scaleX * scale,
    scaleY: coordinate.scaleY * scale
  });
};

var scaleSvg = function scaleSvg($, scaleOptions) {
  var $svg = $('svg');
  var svgAttrs = $svg.attr();
  var originCoordinate = getOriginCoordinate(svgAttrs);
  var fixedCoordinate = svgCoordinateSimplify(originCoordinate);

  var scale = getScale(fixedCoordinate, scaleOptions);

  var finalCoordinate = getScaledCoordinate(fixedCoordinate, scale);

  $svg.attr({
    width: finalCoordinate.width,
    height: finalCoordinate.height,
    viewBox: [0, 0, finalCoordinate.width, finalCoordinate.height].join(' ')
  });

  scalePath($, finalCoordinate);
};

var svgScale = function svgScale(svgString) {
  var scaleOptions = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
  return new Promise(function (resolve) {
    var $ = _cheerio2.default.load(svgString, {
      xmlMode: true
    });

    scaleSvg($, scaleOptions);

    resolve($.html('svg'));
  });
};

exports.default = svgScale;