'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _index = require('./index');

var _index2 = _interopRequireDefault(_index);

var _loaderUtils = require('loader-utils');

var _loaderUtils2 = _interopRequireDefault(_loaderUtils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var idPrefixForLoader = function idPrefixForLoader(loaderContext) {
  var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
  return _loaderUtils2.default.interpolateName(loaderContext, '[sha512:hash:base64:7]', options);
};

function svgSimplifyLoader(content) {
  var _this = this;

  if (this.cacheable) this.cacheable();
  var callback = this.async();

  var options = _loaderUtils2.default.parseQuery(this.query);

  if (options.useConfig) {
    var configName = options.useConfig;
    options = this.options[configName];
    if (options === undefined) {
      callback(new Error('You specified "useConfig=' + configName + '" for svg-simplify\n        but there is no property named "' + configName + '" in your main webpack configuration.'));
      return;
    }
  }

  (0, _index2.default)(content, _extends({}, options, {
    idPrefix: function idPrefix() {
      return idPrefixForLoader(_this, {
        content: content
      });
    }
  })).then(function (res) {
    callback(null, res);
  }).catch(function (err) {
    callback(err);
  });
}

module.exports = svgSimplifyLoader;